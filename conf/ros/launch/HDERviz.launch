<launch>
    <group ns="HumanGroup">
        <arg name="Human"/>
        <arg name="gui" default="False"/>
        <arg name="vel" default="True"/>
        <arg name="eff" default="True"/>
        <arg name="humanModel" default="$(find HDERviz)/urdfs/humanSubject03_66dof.urdf"/>

     <!--    <arg name="rvizconfig" default="$(find HDERviz)/rviz/HDERviz.rviz" />
-->
        <param name="robot_description" command="/Users/kdarvish/Desktop/icub_ws/HDE/human-dynamics-estimation/app/urdfs/Claudia66DoF_PILimit.urdf" />
        <param name="use_gui" value="False"/>

        <node name="rviz" pkg="rviz" type="rviz" args="-d /Users/kdarvish/Desktop/icub_ws/HDE/human-dynamics-estimation/app/rviz/Human.rviz" required="true" />

        <!-- Configure the robot_state_publisher node -->
        <!-- This is the old method. Now we use the idyntree module -->
        <!--

              yarprobotstatepublisher --tfPrefix /Human/ --model humanSubject01_66dof.urdf
                  --base-frame Pelvis --jointstates-topic "/Human/joint_states"

        -->
    </group>
 <!--    <group ns="RobotGroup">
        <arg name="Robot" />
        <arg name="gui" default="False" />
        <arg name="vel" default="True" />
        <arg name="eff" default="True"/>
        <arg name="robotModel" default="$(find HDERviz)/urdfs/iCubGenova02.urdf"/>

        <param name="use_gui" value="$(arg gui)"/>
        <param name="robot_description" command="$(find xacro)/xacro.py $(arg robotModel)" />

        <param name="tf_prefix" value="robot" type="str"/>
    </group> -->
</launch>
